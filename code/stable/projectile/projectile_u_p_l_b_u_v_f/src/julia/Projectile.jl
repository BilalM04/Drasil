""" Projectile.jl
    A program to predict whether a launched projectile hits its target.
    - Authors: Samuel J. Crawford, Brooks MacLachlan, and W. Spencer Smith
    - Note: Generated by Drasil v0.1-alpha
"""

module Projectile

""" Structure for holding the input values
"""
mutable struct InputParametersClass
    v_launch::AbstractFloat
    theta::AbstractFloat
    p_target::AbstractFloat
    
    """ Initializes input object by reading inputs and checking physical constraints on the input
        - Parameter filename: name of the input file
    """
    function InputParametersClass(filename::AbstractString)
        self = new()
        
        outfile = open("log.txt", "a")
        println(outfile, "function InputParameters called with inputs: {")
        print(outfile, "  filename = ")
        println(outfile, filename)
        println(outfile, "  }")
        close(outfile)
        
        get_input(self, filename)
        input_constraints(self)
        
        return self
    end
end

""" Reads input from a file with the given file name
    - Parameter filename: name of the input file
"""
function get_input(self::InputParametersClass, filename::AbstractString)
    outfile = open("log.txt", "a")
    println(outfile, "function get_input called with inputs: {")
    print(outfile, "  filename = ")
    println(outfile, filename)
    println(outfile, "  }")
    close(outfile)
    
    infile = open(filename, "r")
    readline(infile)
    self.v_launch = parse(Float32, readline(infile))
    outfile = open("log.txt", "a")
    print(outfile, "var 'self.v_launch' assigned ")
    print(outfile, self.v_launch)
    println(outfile, " in module Projectile")
    close(outfile)
    readline(infile)
    self.theta = parse(Float32, readline(infile))
    outfile = open("log.txt", "a")
    print(outfile, "var 'self.theta' assigned ")
    print(outfile, self.theta)
    println(outfile, " in module Projectile")
    close(outfile)
    readline(infile)
    self.p_target = parse(Float32, readline(infile))
    outfile = open("log.txt", "a")
    print(outfile, "var 'self.p_target' assigned ")
    print(outfile, self.p_target)
    println(outfile, " in module Projectile")
    close(outfile)
    close(infile)
end

""" Verifies that input values satisfy the physical constraints
"""
function input_constraints(self::InputParametersClass)
    outfile = open("log.txt", "a")
    println(outfile, "function input_constraints called with inputs: {")
    println(outfile, "  }")
    close(outfile)
    
    if !(self.v_launch > Float32(0.0))
        print("Warning: ")
        print("v_launch has value ")
        print(self.v_launch)
        print(", but is suggested to be ")
        print("above ")
        print(Float32(0.0))
        println(".")
    end
    if !(Float32(0.0) < self.theta && self.theta < pi / Float32(2.0))
        print("Warning: ")
        print("theta has value ")
        print(self.theta)
        print(", but is suggested to be ")
        print("between ")
        print(Float32(0.0))
        print(" and ")
        print(pi / Float32(2.0))
        print(" ((pi)/(2))")
        println(".")
    end
    if !(self.p_target > Float32(0.0))
        print("Warning: ")
        print("p_target has value ")
        print(self.p_target)
        print(", but is suggested to be ")
        print("above ")
        print(Float32(0.0))
        println(".")
    end
end

""" Calculates flight duration: the time when the projectile lands (s)
    - Parameter inParams: structure holding the input values
    - Parameter g: magnitude of gravitational acceleration (m/s^2)
    - Returns: flight duration: the time when the projectile lands (s)
"""
function func_t_flight(inParams::InputParametersClass, g::AbstractFloat)
    outfile = open("log.txt", "a")
    println(outfile, "function func_t_flight called with inputs: {")
    print(outfile, "  inParams = ")
    print(outfile, "Instance of InputParametersClass object")
    println(outfile, ", ")
    print(outfile, "  g = ")
    println(outfile, g)
    println(outfile, "  }")
    close(outfile)
    
    return Float32(2.0) * inParams.v_launch * sin(inParams.theta) / g
end

""" Calculates landing position: the distance from the launcher to the final position of the projectile (m)
    - Parameter inParams: structure holding the input values
    - Parameter g: magnitude of gravitational acceleration (m/s^2)
    - Returns: landing position: the distance from the launcher to the final position of the projectile (m)
"""
function func_p_land(inParams::InputParametersClass, g::AbstractFloat)
    outfile = open("log.txt", "a")
    println(outfile, "function func_p_land called with inputs: {")
    print(outfile, "  inParams = ")
    print(outfile, "Instance of InputParametersClass object")
    println(outfile, ", ")
    print(outfile, "  g = ")
    println(outfile, g)
    println(outfile, "  }")
    close(outfile)
    
    return Float32(2.0) * inParams.v_launch ^ Float32(2.0) * sin(inParams.theta) * cos(inParams.theta) / g
end

""" Calculates distance between the target position and the landing position: the offset between the target position and the landing position (m)
    - Parameter inParams: structure holding the input values
    - Parameter p_land: landing position: the distance from the launcher to the final position of the projectile (m)
    - Returns: distance between the target position and the landing position: the offset between the target position and the landing position (m)
"""
function func_d_offset(inParams::InputParametersClass, p_land::AbstractFloat)
    outfile = open("log.txt", "a")
    println(outfile, "function func_d_offset called with inputs: {")
    print(outfile, "  inParams = ")
    print(outfile, "Instance of InputParametersClass object")
    println(outfile, ", ")
    print(outfile, "  p_land = ")
    println(outfile, p_land)
    println(outfile, "  }")
    close(outfile)
    
    return p_land - inParams.p_target
end

""" Calculates output message as a string
    - Parameter inParams: structure holding the input values
    - Parameter epsilon: hit tolerance
    - Parameter d_offset: distance between the target position and the landing position: the offset between the target position and the landing position (m)
    - Returns: output message as a string
"""
function func_s(inParams::InputParametersClass, epsilon::AbstractFloat, d_offset::AbstractFloat)
    outfile = open("log.txt", "a")
    println(outfile, "function func_s called with inputs: {")
    print(outfile, "  inParams = ")
    print(outfile, "Instance of InputParametersClass object")
    println(outfile, ", ")
    print(outfile, "  epsilon = ")
    print(outfile, epsilon)
    println(outfile, ", ")
    print(outfile, "  d_offset = ")
    println(outfile, d_offset)
    println(outfile, "  }")
    close(outfile)
    
    if abs(d_offset / inParams.p_target) < epsilon
        return "The target was hit."
    elseif d_offset < Float32(0.0)
        return "The projectile fell short."
    else
        return "The projectile went long."
    end
end

""" Writes the output values to output.txt
    - Parameter s: output message as a string
    - Parameter d_offset: distance between the target position and the landing position: the offset between the target position and the landing position (m)
    - Parameter t_flight: flight duration: the time when the projectile lands (s)
"""
function write_output(s::AbstractString, d_offset::AbstractFloat, t_flight::AbstractFloat)
    outfile = open("log.txt", "a")
    println(outfile, "function write_output called with inputs: {")
    print(outfile, "  s = ")
    print(outfile, s)
    println(outfile, ", ")
    print(outfile, "  d_offset = ")
    print(outfile, d_offset)
    println(outfile, ", ")
    print(outfile, "  t_flight = ")
    println(outfile, t_flight)
    println(outfile, "  }")
    close(outfile)
    
    outputfile = open("output.txt", "w")
    print(outputfile, "s = ")
    println(outputfile, s)
    print(outputfile, "d_offset = ")
    println(outputfile, d_offset)
    print(outputfile, "t_flight = ")
    println(outputfile, t_flight)
    close(outputfile)
end

filename = ARGS[1]
outfile = open("log.txt", "a")
print(outfile, "var 'filename' assigned ")
print(outfile, filename)
println(outfile, " in module Projectile")
close(outfile)
g = Float32(9.8)
epsilon = Float32(2.0e-2)
outfile = open("log.txt", "a")
print(outfile, "var 'g' assigned ")
print(outfile, g)
println(outfile, " in module Projectile")
close(outfile)
outfile = open("log.txt", "a")
print(outfile, "var 'epsilon' assigned ")
print(outfile, epsilon)
println(outfile, " in module Projectile")
close(outfile)
inParams = InputParametersClass(filename)
t_flight = func_t_flight(inParams, g)
outfile = open("log.txt", "a")
print(outfile, "var 't_flight' assigned ")
print(outfile, t_flight)
println(outfile, " in module Projectile")
close(outfile)
p_land = func_p_land(inParams, g)
outfile = open("log.txt", "a")
print(outfile, "var 'p_land' assigned ")
print(outfile, p_land)
println(outfile, " in module Projectile")
close(outfile)
d_offset = func_d_offset(inParams, p_land)
outfile = open("log.txt", "a")
print(outfile, "var 'd_offset' assigned ")
print(outfile, d_offset)
println(outfile, " in module Projectile")
close(outfile)
s = func_s(inParams, epsilon, d_offset)
outfile = open("log.txt", "a")
print(outfile, "var 's' assigned ")
print(outfile, s)
println(outfile, " in module Projectile")
close(outfile)
write_output(s, d_offset, t_flight)

end
